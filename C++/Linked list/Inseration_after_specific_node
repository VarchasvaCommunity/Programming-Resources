// C++ program to demonstrate inserting a node AFTER a given node in linked list

#include <bits/stdc++.h>
using namespace std;

// linked list node
class Node {
public:
	int data;
	Node* next;
};

// given a node prev_node, insert a new
// node after the given prev_node
void insertAfter(Node* prev_node, int new_data)
{
	//checking if the given prev_node is NULL
	if (prev_node == NULL) {
		cout << "the given previous node cannot be NULL";
		return;
	}

	//allocating a new node
	Node* new_node = new Node();

	// put in the data
	new_node->data = new_data;

	//making the next of new node & point to the next of prev_node
	new_node->next = prev_node->next;

	//making the next of prev_node & point to the new node
	prev_node->next = new_node;
}

// function to insert an element in the linked list
void push(Node** head_ref, int new_data)
{
	Node* new_node = new Node();
	new_node->data = new_data;
	new_node->next = (*head_ref);
	(*head_ref) = new_node;
}

// function to print the contents of linked list starting from head

void printList(Node* node)
{
	while (node != NULL) {
		cout << " " << node->data;
		node = node->next;
	}
	cout << "\n";
}

int main()
{
	// start with an empty list
	Node* head = NULL;

	// inserting nodes at the beginning
	push(&head, 6);
	push(&head, 5);
	push(&head, 3);
	push(&head, 2);
	push(&head, 1);

	cout << "Initial linked list is: ";
	printList(head);

	// insert 4 after 3
	insertAfter(head->next->next, 4);

	cout << "Final (after inserting) 4 after 3: ";
	printList(head);

	return 0;
}
